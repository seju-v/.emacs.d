(defun if-empty-forward-line (&optional arg)
  (interactive)
  (if (looking-at-p "[[:space:]]*$")
      (forward-line arg)))

(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
      (forward-line)
      (transpose-lines -1)
    (previous-line 1)
    (move-to-column col)))

(defun move-paragraph-up ()
  (interactive)
  (let* ((col (current-column))
	 (line (line-number-at-pos))
	 (para-start (progn (backward-paragraph 2)
			    (line-number-at-pos)))
	 (para-end (progn (forward-paragraph)
			  (line-number-at-pos)))
	 (move (- para-start para-end)))
    (goto-line line)
    (transpose-paragraphs -1)
    (goto-line line)
    (line-move move)
    (move-to-column col)))

(defun move-paragraph-down ()
  (interactive)
  (let* ((col (current-column))
	 (row (line-number-at-pos))
	 (para-start (progn (forward-paragraph)
			    (line-number-at-pos)))
	 (para-end (progn (forward-paragraph)
			  (line-number-at-pos)))
	 (move (- para-end para-start)))
    (goto-line row)
    (transpose-paragraphs 1)
    (goto-line row)
    (line-move move)
    (move-to-column col)))

(defun new-line-above ()
  (interactive)
  (beginning-of-line)
  (newline)
  (forward-line -1)
  (indent-for-tab-command))

(global-set-key (kbd "<C-s-down>") 'move-line-down)
(global-set-key (kbd "<C-s-up>") 'move-line-up)
(global-set-key (kbd "<C-M-s-down>") 'move-paragraph-down)
(global-set-key (kbd "<C-M-s-up>") 'move-paragraph-up)
(global-set-key (kbd "<S-return>") 'new-line-above)
